generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos

// El modelo Company representa a las empresas con su información de contacto.
model Company {
  id       String  @id @default(cuid()) // Identificador único de la empresa.
  name     String  @unique // Nombre de la empresa.
  phone    String? // Número de teléfono de la empresa.
  email    String? // Dirección de correo electrónico de la empresa.
  address  String? // Dirección física de la empresa.
  location String? // Ubicación de la empresa (por ejemplo, ciudad, estado).

  clients Client[] // Relación uno a muchos con el modelo Client.
}

// El modelo Client representa a los clientes individuales asociados con una empresa quienes son los que realizan los pedidos.
model Client {
  id         String  @id @default(cuid()) // Identificador único del cliente.
  companyId  String? // Clave foránea que referencia a Company.
  first_name String // Nombre del cliente.
  last_name  String // Apellido del cliente.
  phone      String? // Número de teléfono del cliente.
  email      String? // Dirección de correo electrónico del cliente.
  address    String? // Dirección física del cliente.

  company Company? @relation(fields: [companyId], references: [id]) // Relación con Company.
  orders  Order[] // Relación uno a muchos con el modelo Order.
}

// El modelo Role define los roles de usuario dentro del sistema.
model Role {
  id    String @id @default(cuid()) // Identificador único del rol.
  name  String @unique // Nombre del rol (por ejemplo, Admin, User).
  users User[] // Relación uno a muchos con el modelo User.
}

// El modelo User representa a los usuarios del sistema.
model User {
  id        String  @id @default(cuid()) // Identificador único del usuario.
  roleId    String // Clave foránea que referencia a Role.
  firstName String // Nombre del usuario.
  lastName  String? // Apellido del usuario.
  username  String  @unique // Nombre de usuario único para iniciar sesión.
  password  String // Contraseña del usuario.

  role   Role    @relation(fields: [roleId], references: [id]) // Relación con Role.
  orders Order[] // Relación uno a muchos con Order.
  logs   Log[] // Relación uno a muchos con Log.
}

// El modelo Status representa los posibles estados de una orden.
model Status {
  id                     String         @id @default(cuid()) // Identificador único del estado.
  name                   String         @unique // Nombre del estado (por ejemplo, Pendiente).
  orders                 Order[] // Relación uno a muchos con Order.
  previousOrderHistories OrderHistory[] @relation("PreviousStatus") // Relación con OrderHistory donde este estado es el estado anterior.
  newOrderHistories      OrderHistory[] @relation("NewStatus") // Relación con OrderHistory donde este estado es el nuevo estado.
}

// El modelo Order representa las órdenes realizadas por los clientes.
model Order {
  id           String    @id @default(cuid()) // Identificador único de la orden.
  clientId     String // Clave foránea que referencia a Client.
  userId       String // Clave foránea que referencia al User que creó la orden.
  statusId     String // Clave foránea que referencia a Status.
  description  String // Descripción de la orden.
  creationDate DateTime // Fecha en que se creó la orden.
  deliveryDate DateTime? // Fecha de entrega opcional.

  client        Client         @relation(fields: [clientId], references: [id]) // Relación con Client.
  user          User           @relation(fields: [userId], references: [id]) // Relación con User.
  status        Status         @relation(fields: [statusId], references: [id]) // Relación con Status.
  histories     OrderHistory[] // Relación uno a muchos con OrderHistory.
  orderProducts OrderProduct[] // Relación muchos a muchos con Product a través de OrderProduct.
}

// El modelo OrderHistory realiza un seguimiento de los cambios en el estado de una orden.
model OrderHistory {
  id               String   @id @default(cuid()) // Identificador único del registro de historial de la orden.
  orderId          String // Clave foránea que referencia a Order.
  previousStatusId String // Clave foránea que referencia al estado anterior en Status.
  newStatusId      String // Clave foránea que referencia al nuevo estado en Status.
  changeDate       DateTime @default(now()) // Fecha y hora en que ocurrió el cambio de estado.

  order          Order  @relation(fields: [orderId], references: [id]) // Relación con Order.
  previousStatus Status @relation("PreviousStatus", fields: [previousStatusId], references: [id]) // Relación con el estado anterior en Status.
  newStatus      Status @relation("NewStatus", fields: [newStatusId], references: [id]) // Relación con el nuevo estado en Status.
}

// El modelo ProductType representa los diferentes tipos de productos disponibles.
model ProductType {
  id   Int    @id @default(autoincrement()) // Identificador único del tipo de producto.
  name String @unique // Nombre del tipo de producto (por ejemplo, Hilo, Polo).

  products Product[] // Relación uno a muchos con Product.
}

// El modelo Color representa los colores que puede tener un producto.
model Color {
  id   Int    @id @default(autoincrement()) // Identificador único del color.
  name String @unique // Nombre del color (por ejemplo, Rojo, Azul).

  products Product[] // Relación uno a muchos con Product.
}

// El modelo Size representa las tallas que puede tener un producto.
model Size {
  id   Int    @id @default(autoincrement()) // Identificador único de la talla.
  name String @unique // Nombre de la talla (por ejemplo, S, M, L).

  products Product[] // Relación uno a muchos con Product.
}

// El modelo Product representa los productos individuales en el inventario.
model Product {
  id            Int     @id @default(autoincrement()) // Identificador único del producto.
  productTypeId Int // Clave foránea que referencia a ProductType.
  colorId       Int? // Clave foránea opcional que referencia a Color.
  sizeId        Int? // Clave foránea opcional que referencia a Size.
  code          String? // Para hilos, puede ser nulo  // Código opcional del producto.
  quantity      Int // Cantidad actual en el inventario.

  productType   ProductType            @relation(fields: [productTypeId], references: [id]) // Relación con ProductType.
  color         Color?                 @relation(fields: [colorId], references: [id]) // Relación opcional con Color.
  size          Size?                  @relation(fields: [sizeId], references: [id]) // Relación opcional con Size.
  transactions  InventoryTransaction[] // Relación uno a muchos con InventoryTransaction.
  orderProducts OrderProduct[] // Relación muchos a muchos con Order a través de OrderProduct.

  @@index([productTypeId]) // Índice para optimizar consultas en productTypeId.
  @@index([colorId]) // Índice para optimizar consultas en colorId.
  @@index([sizeId]) // Índice para optimizar consultas en sizeId.
}

// El modelo InventoryTransaction registra los cambios en el inventario de un producto.
model InventoryTransaction {
  id              Int      @id @default(autoincrement()) // Identificador único de la transacción.
  productId       Int // Clave foránea que referencia a Product.
  transactionDate DateTime // Fecha y hora de la transacción.
  quantityChange  Int // Positivo o negativo        // Cantidad de cambio en el inventario.
  notes           String? // Notas opcionales sobre la transacción.

  product Product @relation(fields: [productId], references: [id]) // Relación con Product.
}

// El modelo OrderProduct representa la relación muchos a muchos entre Orders y Products.
model OrderProduct {
  orderId   String // Clave foránea que referencia a Order.
  productId Int // Clave foránea que referencia a Product.
  quantity  Int // Cantidad del producto en la orden.

  order   Order   @relation(fields: [orderId], references: [id]) // Relación con Order.
  product Product @relation(fields: [productId], references: [id]) // Relación con Product.

  @@id([orderId, productId]) // Clave primaria compuesta para garantizar unicidad.
}

// El modelo Log registra las acciones realizadas por los usuarios.
model Log {
  id      String   @id @default(cuid()) // Identificador único del registro.
  userId  String // Clave foránea que referencia a User.
  logDate DateTime @default(now()) // Fecha y hora en que se registró la acción.
  action  String // Descripción de la acción realizada.

  user User @relation(fields: [userId], references: [id]) // Relación con User.
}
